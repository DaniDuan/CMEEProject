fx = function(x^n/(b^n+x^n))
fx(x,n,b) = function(x^n/(b^n+x^n))
fx(x,n,b) = function(x**n/(b**n+x**n))
fx = function(x,n,b){x**n/(b**n+x**n)}
x = seq(1:100)
fx = function(x,n,b){x**n/(b**n+x**n)}
x_value = seq(1:100)
table = data.frame()
for(i in x_value){
d = data.frame(x = i,
fx_n1 = fx(i,1,2),
fx_n2 = fx(i,2,2),
fx_n3 = fx(i,3,2))
table = rbind(table,d)
}
View(table)
plot(table)
plot(table$x, table$fx_n1)
plot(table$x, table$fx_n1, type = l)
plot(table$x, table$fx_n1, type = "l")
plot(table$x, table$fx_n2, type  "l")
par(mfrow(2,2))
plot(table$x, table$fx_n1, type = "l")
plot(table$x, table$fx_n2, type = "l")
plot(table$x, table$fx_n3, type = "l")
par(mfrow=c(2,2))
plot(table$x, table$fx_n1, type = "l")
plot(table$x, table$fx_n2, type = "l")
plot(table$x, table$fx_n3, type = "l")
par(mfrow=c(1,1))
plot(table$x, table$fx_n1, type = "l", col =1)
line(table$x, table$fx_n2, col = 2)
line(table$x, table$fx_n3, col = 3)
line(table$x, table$fx_n2, col = 2)
View(table)
lines(table$x, table$fx_n2, col = 2)
lines(table$x, table$fx_n3, col = 3)
x_value = seq(1:100)
fx_n1 = fx(i,1,2)
fx_n2 = fx(i,2,2)
fx_n3 = fx(i,3,2)
lines(x, fx_n1)
lines(x, fx_n1)
fx_n1 = fx(x,1,2)
fx_n2 = fx(x,2,2)
fx_n3 = fx(x,3,2)
lines(x, fx_n1)
lines(x, fx_n2, col = 2)
lines(x, fx_n3, col = 3)
fx_n1 = fx_n2
fx_n1 = fx(x,1,2)
fx_n2 = fx(x,2,2)
fx_n3 = fx(x,3,2)
lines(x, fx_n1)
lines(x, fx_n2, col = 2)
lines(x, fx_n3, col = 3)
# #Output csv
# write.csv(School_fit, "../results/School_fit.csv", row.names = F)
# #Import csv
School_fit = read.csv("../results/School_fit.csv", header =T)
rm(list=ls())
graphics.off()
library(minpack.lm)
library(ggplot2)
library(reshape2)
library(grid)
print("Data processing...")
data = read.csv("../data/ThermRespData.csv")
# Store all possible relevant information in a new data frame
cData = data.frame(data$ID,data$StandardisedTraitName, data$OriginalTraitValue, data$OriginalTraitUnit,data$Consumer, data$Habitat, data$Location, data$ConStage, data$ConTemp)
names(cData) = c("ID", "trait_name", "trait_value", "trait_unit","consumer", "habitat", "location", "stage", "temp")
cData = cData[-which(cData$trait_value < 0),] # Getting rid of negative trait values
cData$temp = as.numeric(cData$temp)
cData$trait_name[cData$trait_name == "gross photosynthesis rate" | cData$trait_name == "net photosynthesis rate"] = "photosynthesis rate"
print("Done!")
for(i in unique(cData$ID)){
datai = subset(cData, cData$ID== i) #Data subset for iteration
if(nrow(datai) >= 5) x = c(x, i) # ID with more than 5 data points
#Fitting the quadratic
plm2 = try(lm(trait_value ~poly(temp,2), data = datai), silent = T) #Fitting the quadratic model
if(class(plm2) != "try-error"){
summ = summary(plm2)
RSS_i = sum(residuals(plm2)^2) # Residual sum of squares
n = nrow(datai) # sample size
p_i = length(coef(plm2)) # Number of parameters
AICc_i = n+2+n*log((2*pi)/n)+n*log(RSS_i) + 2*p_i*(n/(n-p_i-1))
dataframe = data.frame( #Outputing the model fitting dataframe
ID = i, consumer = unique(datai$consumer), trait_name = unique(datai$trait_name),
r2 = summ$r.squared, a = summ$coefficients[2], b = summ$coefficients[3], intercept = summ$coefficients[1],
AIC = AIC(plm2), AICc = AICc_i, BIC = BIC(plm2),
habitat = unique(datai$habitat), location = unique(datai$location), stage = unique(datai$stage)
)
lm2_model_fitting = rbind(lm2_model_fitting, dataframe) #Combining dataframe
}
#Fitting the cubic
plm3 = try(lm(trait_value ~poly(temp,3),data = datai), silent = T) #Fitting the cubic model
if(class(plm3) != "try-error"){
summ = summary(plm3)
RSS_i = sum(residuals(plm3)) # Residual sum of squares
n = nrow(datai) # sample size
p_i = length(coef(plm3)) # Number of parameters
AICc_i = n+2+n*log((2*pi)/n)+n*log(RSS_i) + 2*p_i*(n/(n-p_i-1))
dataframe = data.frame( #Outputing the model fitting dataframe
ID = i, consumer = unique(datai$consumer), trait_name = unique(datai$trait_name),
r2 = summ$r.squared, a = summ$coefficients[2], b = summ$coefficients[3], c = summ$coefficients[4], intercept = summ$coefficients[1],
AIC = AIC(plm3), AICc = AICc_i, BIC = BIC(plm3),
habitat = unique(datai$habitat), location = unique(datai$location), stage = unique(datai$stage))
lm3_model_fitting = rbind(lm3_model_fitting, dataframe) #Combining dataframe
}
#  print(i) # The progress bar~~
}
print("Done!")
###########Fitting Schoolfield model###################
## Defining Schoolfield model function
Schoolfield = function(tran_kT, lnB0, Th, Ea, Eh){
return(lnB0+(tran_kT+1/(283.15*k))*Ea-log(1+exp((1/(Th*k)+tran_kT)*Eh)))
}
## Fitting lnB ~ -1/k*(1/T-1/283.15) as linear model (Arrhenius)
## intercept = lnB0, slope = Ea
k = 8.61*10^(-5)
# Creating a new data frame for school field model fitting
sch_cData = cData
sch_cData$lnB = log(sch_cData$trait_value)
sch_cData$temp = sch_cData$temp+273.15
sch_cData$tran_kT = -1/(k*sch_cData$temp)
sch_cData$tran_kTT = sch_cData$tran_kT+1/(283.15*k)
sch_cData = sch_cData[-which(sch_cData$lnB == -Inf),]
# Fitting Arrhenius, dividing all data with before and after deactivation;
# get estimation values(possible starting values) on A0(B0) and Ea
ID = c(); consumer = c(); stage= c(); trait_name = c(); Th = c(); lnA0 = c(); Ea = c(); Eh = c();
r2_befdeact = c(); r2_deact = c(); before = c(); after = c(); n = 0
for(i in unique(sch_cData$ID)){
datai = sch_cData[sch_cData$ID == i,] # Data subset for iteration
if(nrow(datai) > 3){
#get the data to fit
T_lnB_max = datai$temp[datai$lnB == max(datai$lnB)] # Deactivation temperature
datai_befdeact = subset(datai, temp <= T_lnB_max) # Data before deactivation
datai_deact = subset(datai, temp >= T_lnB_max) # Data after deactivation
temph = max(datai_befdeact$temp)
if(nrow(datai_befdeact)>1){ # At least two data points to fit a linear
lm_sch_befdeact = lm(lnB~tran_kTT, data = datai_befdeact)
summ_befdeact = summary(lm_sch_befdeact)
lnA0 = c(lnA0, summ_befdeact$coefficients[1])
Ea_value = summ_befdeact$coefficients[2]
r2_befdeact = c(r2_befdeact, round(summ_befdeact$r.squared, digits = 4))
}else{ # Give an estimation if only one point
lnA0 = c(lnA0, max(datai$lnB))
Ea_value = 0.5
r2_befdeact = c(r2_befdeact,NaN)
before = c(before, i)}
Ea = c(Ea, Ea_value)
if(nrow(datai_deact)>1){ # At least two data points to fit a linear
n = n+1 #How many have a deactivation point?
lm_sch_deact = lm(lnB~tran_kTT, data = datai_deact)
summ_deact = summary(lm_sch_deact)
Eh = c(Eh, -summ_deact$coefficients[2])
r2_deact = c(r2_deact, round(summ_deact$r.squared, digits = 4))
}else{ # Give an estimation if only one point
Eh = c(Eh,4*Ea_value)
r2_deact = c(r2_deact,NaN)
after = c(after, i)}
ID = c(ID, i)
consumer = c(consumer, unique(datai$consumer))
stage = c(stage, unique(datai$stage))
trait_name = c(trait_name, unique(datai$trait_name))
Th = c(Th, temph)
}
}
Arrhenius = data.frame(ID, consumer, stage, trait_name, Th, lnA0, Ea, Eh,r2_befdeact, r2_deact)
View(Arrhenius)
setwd('/home/danica/Documents/CMEEProject/data')
rm(list=ls())
graphics.off()
library(minpack.lm)
library(ggplot2)
library(reshape2)
library(grid)
k = 8.61*10^(-5)
logSchoolfield = function(Temp, lnB0, T_pk, Ea, E_D){
return(lnB0-Ea*(1/Temp-1/273.15)/k-log(1+(Ea/(E_D-Ea))*exp(E_D*(1/T_pk-1/Temp)/k)))
}
Schoolfield = function(Temp, B0, T_pk, Ea, E_D){
return(B0*exp(-Ea*(1/Temp-1/273.15)/k)/(1+(Ea/(E_D-Ea))*exp(E_D*(1/T_pk-1/Temp)/k)))
}
CUE = function(G, R){
return(G/(G+R))
}
data = read.csv("./aerobic_tpc_data.csv")
data = data[-which(data$temps_before_peak_resp<=3 | data$temps_before_peak_growth<=3),]
res_data = data.frame(data$E_resp, data$B0_resp, data$E_D_resp, data$Tpk_resp, data$Ppk_resp, data$r_sq_resp)
names(res_data) = c('Ea', 'B0', 'E_D', 'T_pk', 'P_pk','r_sq')
grow_data = data.frame(data$E_growth, data$B0_growth, data$E_D_growth, data$Tpk_growth, data$Ppk_growth, data$r_sq_growth)
names(grow_data) = c('Ea', 'B0', 'E_D', 'T_pk', 'P_pk','r_sq')
###### Growth ######
plot(1, type="n", xlab = "Temperature(celsius)", ylab = 'growth rate', xlim=c(0, 50), ylim = c(0, 0.8))
for(i in 1:nrow(grow_data)){
lines(Schoolfield(Temp = 273.15:323.15, B0 = grow_data$B0[i], T_pk = grow_data$T_pk[i], Ea = grow_data$Ea[i], E_D = grow_data$E_D[i]), typ = 'l')
}
plot(1, type="n", xlab = "Temperature(celsius)", ylab = 'ln(growth rate)', xlim=c(0, 50), ylim=c(-15, 0))
for(i in 1:nrow(grow_data)){
lines(logSchoolfield(Temp = 273.15:323.15, lnB0 = log(grow_data$B0[i]), T_pk = grow_data$T_pk[i], Ea = grow_data$Ea[i], E_D = grow_data$E_D[i]), typ = 'l')
}
grow_data$B0
maximum(grow_data$B0)
max(grow_data$B0)
min(grow_data$B0)
max(grow_data$B0) - min(grow_data$B0)
mean(grow_data$B0)
database = read.csv("./database.csv")
database = database[which(database$StandardisedTraitName == "Specific Growth Rate"),]
database[which(database$AmbientTemp > 150),]$AmbientTemp = database[which(database$AmbientTemp > 150),]$AmbientTemp - 273.15
database = database[which(database$ConKingdom == 'Bacteria'),]
scatter.smooth(database$AmbientTemp, database$StandardisedTraitValue, xlab ='Temperature', ylab = 'Growth rate')
summ = read.csv("./summary.csv")
summ = summ[-which(summ$Points_Before_Peak < 3),]
summ = summ[which(summ$Trait == "Specific Growth Rate"),]
summ = summ[-which(summ$AIC > 100),]
summ = summ[-which(summ$E_D < summ$E),]
summ = summ[-which(summ$T_pk > 370),]
summ = summ[-which(summ$E_D > 30),]
summ = summ[which(summ$ConKingdom == 'Bacteria'),]
#summ = summ[which(summ$B0>0),]
s_data = data.frame(summ$X, summ$Species, summ$B0, summ$E, summ$T_pk, summ$E_D, summ$R_Squared, summ$AIC, summ$BIC)
names(s_data) = c('ID', 'Species', 'B0', 'Ea', 'T_pk', 'E_D', 'r_sq', 'AIC', 'BIC')
s_data$B0
max(s_data$B0) - min(s_data$B0)
max(exp(s_data$B0)) - min(exp(s_data$B0))
max(exp(s_data$B0))
min(exp(s_data$B0))
median(exp(s_data$B0))
hist(exp(s_data$B0))
hist(s_data$B0)
median(s_data$B0)
max(s_data$B0)
